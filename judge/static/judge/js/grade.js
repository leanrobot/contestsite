// Generated by CoffeeScript 1.9.3
(function() {
  var DEBUG, GradingMain, TimeConversion, angularApp, test;

  DEBUG = 0;

  test = true;

  angularApp = angular.module("Grading", ['ngSanitize', 'ngResource']).config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('[[');
    return $interpolateProvider.endSymbol(']]');
  });


  /*
  angularApp.config ($resourceProvider) ->
  		 * Don't strip trailing slashes from calculated URLs
  		$resourceProvider.defaults.stripTrailingSlashes = false;
   */

  angularApp.factory("api", function($http, $q, $resource) {
    return {
      test: function() {
        return console.log("test!");
      },
      getUngradedResults: function(successFunc) {
        console.log();
        return $http.get('/api/v1/ungradedresult?format=json').then(successFunc, function(response) {
          return $q.reject(response.data);
        });
      },
      gradeResult: function(correct, solution, successFunc) {
        solution.graded = true;
        solution.successful = correct;
        console.log(solution.id);
        return $http({
          url: "/api/v1/problemresult/" + solution.id + "/?format=json",
          data: solution,
          method: "PATCH"
        }).then(successFunc);
      }
    };
  });

  angularApp.controller('Main', GradingMain = (function() {
    function GradingMain($scope, api) {
      this.$scope = $scope;
      this.api = api;
      DEBUG = this;
      console.log("controller: create");
      this.$scope.solutions = [];
      this.$scope.selected = null;
      this.load();
      this.time = new TimeConversion();
    }

    GradingMain.prototype.load = function() {
      console.log("controller: load");
      this.$scope.selected = null;
      this.$scope.loading = true;
      return this.api.getUngradedResults((function(_this) {
        return function(response) {
          console.log("graded results: ");
          console.log(response.data.objects);
          _this.$scope.solutions = response.data.objects;
          if (_this.$scope.solutions.length > 0) {
            _this.$scope.selected = _this.$scope.solutions[0];
          }
          return _this.$scope.loading = false;
        };
      })(this));
    };

    GradingMain.prototype.gradeResult = function(correct, solution) {
      this.$scope.solutions = [];
      return this.api.gradeResult(correct, solution, (function(_this) {
        return function(response) {
          _this.$scope.selected = null;
          return _this.load();
        };
      })(this));
    };

    GradingMain.prototype.setSelected = function(solution) {
      console.log("controller: select");
      console.log(solution);
      return this.$scope.selected = solution;
    };
    
    /* TODO: Remove once Ace-Editor has been fully implemented
    GradingMain.prototype.highlightCode = function(code) {
      var highlightObj;
      if (code != null) {
        highlightObj = hljs.highlightAuto(code);
        return highlightObj.value;
      } else {
        return code;
      }
    };
    */

    GradingMain.prototype.runningTime = function(startraw, endraw) {
      var diff, end, start;
      start = new Date(startraw);
      end = new Date(endraw);
      diff = end - start;
      return diff;
    };

    return GradingMain;

  })());

  TimeConversion = (function() {
    function TimeConversion() {}

    TimeConversion.prototype.createTime = function(timeraw) {
      var date;
      return date = new Date(timeraw);
    };

    TimeConversion.prototype.millisToSeconds = function(millis, accuracy) {
      if (accuracy == null) {
        return accuracy = 1;
      }

      /*
      		52,451
      		52.451
      		x / 10
       */
    };

    return TimeConversion;

  })();

}).call(this);
